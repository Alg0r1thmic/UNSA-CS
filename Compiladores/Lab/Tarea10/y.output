Conflict in state 52 between rule 25 and token '+' resolved as reduce.
Conflict in state 52 between rule 25 and token '-' resolved as reduce.
Conflict in state 52 between rule 25 and token '*' resolved as shift.
Conflict in state 52 between rule 25 and token '/' resolved as shift.
Conflict in state 53 between rule 26 and token '+' resolved as reduce.
Conflict in state 53 between rule 26 and token '-' resolved as reduce.
Conflict in state 53 between rule 26 and token '*' resolved as shift.
Conflict in state 53 between rule 26 and token '/' resolved as shift.
Conflict in state 54 between rule 27 and token '+' resolved as reduce.
Conflict in state 54 between rule 27 and token '-' resolved as reduce.
Conflict in state 54 between rule 27 and token '*' resolved as reduce.
Conflict in state 54 between rule 27 and token '/' resolved as reduce.
Conflict in state 55 between rule 28 and token '+' resolved as reduce.
Conflict in state 55 between rule 28 and token '-' resolved as reduce.
Conflict in state 55 between rule 28 and token '*' resolved as reduce.
Conflict in state 55 between rule 28 and token '/' resolved as reduce.
State 56 contains 1 shift/reduce conflict.

Grammar
rule 1    programC -> listaDeclC
rule 2    listaDeclC -> listaDeclC declC
rule 3    listaDeclC ->		/* empty */
rule 4    declC -> Tipo listaVar ';'
rule 5    declC -> Tipo ID '(' listaPar ')' bloque
rule 6    Tipo -> INT
rule 7    Tipo -> FLOAT
rule 8    listaVar -> ID ',' listaVar
rule 9    listaVar -> ID
rule 10   listaPar -> Tipo ID ',' listaPar
rule 11   listaPar -> Tipo ID
rule 12   listaPar ->		/* empty */
rule 13   bloque -> '{' listaVarLoc listaProp '}'
rule 14   listaVarLoc -> Tipo listaVar ';' listaVarLoc
rule 15   listaVarLoc ->		/* empty */
rule 16   listaProp -> listaProp prop
rule 17   listaProp ->		/* empty */
rule 18   prop -> ';'
rule 19   prop -> IF '(' expr ')' prop
rule 20   prop -> IF '(' expr ')' prop ELSE prop
rule 21   prop -> WHILE '(' expr ')' prop
rule 22   prop -> ID '=' expr ';'
rule 23   prop -> bloque
rule 24   expr -> NUM
rule 25   expr -> expr '+' expr
rule 26   expr -> expr '-' expr
rule 27   expr -> expr '*' expr
rule 28   expr -> expr '/' expr
rule 29   expr -> '(' expr ')'
rule 30   expr -> ID

Terminals, with rules where they appear

$ (-1)
'(' (40) 5 19 20 21 29
')' (41) 5 19 20 21 29
'*' (42) 27
'+' (43) 25
',' (44) 8 10
'-' (45) 26
'/' (47) 28
';' (59) 4 14 18 22
'=' (61) 22
'{' (123) 13
'}' (125) 13
error (256)
INT (258) 6
FLOAT (259) 7
ID (260) 5 8 9 10 11 22 30
IF (261) 19 20
ELSE (262) 20
NUM (263) 24
WHILE (264) 21

Nonterminals, with rules where they appear

programC (21)
    on left: 1
listaDeclC (22)
    on left: 2 3, on right: 1 2
declC (23)
    on left: 4 5, on right: 2
Tipo (24)
    on left: 6 7, on right: 4 5 10 11 14
listaVar (25)
    on left: 8 9, on right: 4 8 14
listaPar (26)
    on left: 10 11 12, on right: 5 10
bloque (27)
    on left: 13, on right: 5 23
listaVarLoc (28)
    on left: 14 15, on right: 13 14
listaProp (29)
    on left: 16 17, on right: 13 16
prop (30)
    on left: 18 19 20 21 22 23, on right: 16 19 20 21
expr (31)
    on left: 24 25 26 27 28 29 30, on right: 19 20 21 22 25 26 27 28
    29


state 0

    $default	reduce using rule 3 (listaDeclC)

    programC	go to state 60
    listaDeclC	go to state 1



state 1

    programC  ->  listaDeclC .   (rule 1)
    listaDeclC  ->  listaDeclC . declC   (rule 2)

    INT 	shift, and go to state 2
    FLOAT	shift, and go to state 3

    $default	reduce using rule 1 (programC)

    declC	go to state 4
    Tipo	go to state 5



state 2

    Tipo  ->  INT .   (rule 6)

    $default	reduce using rule 6 (Tipo)



state 3

    Tipo  ->  FLOAT .   (rule 7)

    $default	reduce using rule 7 (Tipo)



state 4

    listaDeclC  ->  listaDeclC declC .   (rule 2)

    $default	reduce using rule 2 (listaDeclC)



state 5

    declC  ->  Tipo . listaVar ';'   (rule 4)
    declC  ->  Tipo . ID '(' listaPar ')' bloque   (rule 5)

    ID  	shift, and go to state 6

    listaVar	go to state 7



state 6

    declC  ->  Tipo ID . '(' listaPar ')' bloque   (rule 5)
    listaVar  ->  ID . ',' listaVar   (rule 8)
    listaVar  ->  ID .   (rule 9)

    '(' 	shift, and go to state 8
    ',' 	shift, and go to state 9

    $default	reduce using rule 9 (listaVar)



state 7

    declC  ->  Tipo listaVar . ';'   (rule 4)

    ';' 	shift, and go to state 10



state 8

    declC  ->  Tipo ID '(' . listaPar ')' bloque   (rule 5)

    INT 	shift, and go to state 2
    FLOAT	shift, and go to state 3

    $default	reduce using rule 12 (listaPar)

    Tipo	go to state 11
    listaPar	go to state 12



state 9

    listaVar  ->  ID ',' . listaVar   (rule 8)

    ID  	shift, and go to state 13

    listaVar	go to state 14



state 10

    declC  ->  Tipo listaVar ';' .   (rule 4)

    $default	reduce using rule 4 (declC)



state 11

    listaPar  ->  Tipo . ID ',' listaPar   (rule 10)
    listaPar  ->  Tipo . ID   (rule 11)

    ID  	shift, and go to state 15



state 12

    declC  ->  Tipo ID '(' listaPar . ')' bloque   (rule 5)

    ')' 	shift, and go to state 16



state 13

    listaVar  ->  ID . ',' listaVar   (rule 8)
    listaVar  ->  ID .   (rule 9)

    ',' 	shift, and go to state 9

    $default	reduce using rule 9 (listaVar)



state 14

    listaVar  ->  ID ',' listaVar .   (rule 8)

    $default	reduce using rule 8 (listaVar)



state 15

    listaPar  ->  Tipo ID . ',' listaPar   (rule 10)
    listaPar  ->  Tipo ID .   (rule 11)

    ',' 	shift, and go to state 17

    $default	reduce using rule 11 (listaPar)



state 16

    declC  ->  Tipo ID '(' listaPar ')' . bloque   (rule 5)

    '{' 	shift, and go to state 18

    bloque	go to state 19



state 17

    listaPar  ->  Tipo ID ',' . listaPar   (rule 10)

    INT 	shift, and go to state 2
    FLOAT	shift, and go to state 3

    $default	reduce using rule 12 (listaPar)

    Tipo	go to state 11
    listaPar	go to state 20



state 18

    bloque  ->  '{' . listaVarLoc listaProp '}'   (rule 13)

    INT 	shift, and go to state 2
    FLOAT	shift, and go to state 3

    $default	reduce using rule 15 (listaVarLoc)

    Tipo	go to state 21
    listaVarLoc	go to state 22



state 19

    declC  ->  Tipo ID '(' listaPar ')' bloque .   (rule 5)

    $default	reduce using rule 5 (declC)



state 20

    listaPar  ->  Tipo ID ',' listaPar .   (rule 10)

    $default	reduce using rule 10 (listaPar)



state 21

    listaVarLoc  ->  Tipo . listaVar ';' listaVarLoc   (rule 14)

    ID  	shift, and go to state 13

    listaVar	go to state 23



state 22

    bloque  ->  '{' listaVarLoc . listaProp '}'   (rule 13)

    $default	reduce using rule 17 (listaProp)

    listaProp	go to state 24



state 23

    listaVarLoc  ->  Tipo listaVar . ';' listaVarLoc   (rule 14)

    ';' 	shift, and go to state 25



state 24

    bloque  ->  '{' listaVarLoc listaProp . '}'   (rule 13)
    listaProp  ->  listaProp . prop   (rule 16)

    ID  	shift, and go to state 26
    IF  	shift, and go to state 27
    WHILE	shift, and go to state 28
    ';' 	shift, and go to state 29
    '{' 	shift, and go to state 18
    '}' 	shift, and go to state 30

    bloque	go to state 31
    prop	go to state 32



state 25

    listaVarLoc  ->  Tipo listaVar ';' . listaVarLoc   (rule 14)

    INT 	shift, and go to state 2
    FLOAT	shift, and go to state 3

    $default	reduce using rule 15 (listaVarLoc)

    Tipo	go to state 21
    listaVarLoc	go to state 33



state 26

    prop  ->  ID . '=' expr ';'   (rule 22)

    '=' 	shift, and go to state 34



state 27

    prop  ->  IF . '(' expr ')' prop   (rule 19)
    prop  ->  IF . '(' expr ')' prop ELSE prop   (rule 20)

    '(' 	shift, and go to state 35



state 28

    prop  ->  WHILE . '(' expr ')' prop   (rule 21)

    '(' 	shift, and go to state 36



state 29

    prop  ->  ';' .   (rule 18)

    $default	reduce using rule 18 (prop)



state 30

    bloque  ->  '{' listaVarLoc listaProp '}' .   (rule 13)

    $default	reduce using rule 13 (bloque)



state 31

    prop  ->  bloque .   (rule 23)

    $default	reduce using rule 23 (prop)



state 32

    listaProp  ->  listaProp prop .   (rule 16)

    $default	reduce using rule 16 (listaProp)



state 33

    listaVarLoc  ->  Tipo listaVar ';' listaVarLoc .   (rule 14)

    $default	reduce using rule 14 (listaVarLoc)



state 34

    prop  ->  ID '=' . expr ';'   (rule 22)

    ID  	shift, and go to state 37
    NUM 	shift, and go to state 38
    '(' 	shift, and go to state 39

    expr	go to state 40



state 35

    prop  ->  IF '(' . expr ')' prop   (rule 19)
    prop  ->  IF '(' . expr ')' prop ELSE prop   (rule 20)

    ID  	shift, and go to state 37
    NUM 	shift, and go to state 38
    '(' 	shift, and go to state 39

    expr	go to state 41



state 36

    prop  ->  WHILE '(' . expr ')' prop   (rule 21)

    ID  	shift, and go to state 37
    NUM 	shift, and go to state 38
    '(' 	shift, and go to state 39

    expr	go to state 42



state 37

    expr  ->  ID .   (rule 30)

    $default	reduce using rule 30 (expr)



state 38

    expr  ->  NUM .   (rule 24)

    $default	reduce using rule 24 (expr)



state 39

    expr  ->  '(' . expr ')'   (rule 29)

    ID  	shift, and go to state 37
    NUM 	shift, and go to state 38
    '(' 	shift, and go to state 39

    expr	go to state 43



state 40

    prop  ->  ID '=' expr . ';'   (rule 22)
    expr  ->  expr . '+' expr   (rule 25)
    expr  ->  expr . '-' expr   (rule 26)
    expr  ->  expr . '*' expr   (rule 27)
    expr  ->  expr . '/' expr   (rule 28)

    '+' 	shift, and go to state 44
    '-' 	shift, and go to state 45
    '*' 	shift, and go to state 46
    '/' 	shift, and go to state 47
    ';' 	shift, and go to state 48



state 41

    prop  ->  IF '(' expr . ')' prop   (rule 19)
    prop  ->  IF '(' expr . ')' prop ELSE prop   (rule 20)
    expr  ->  expr . '+' expr   (rule 25)
    expr  ->  expr . '-' expr   (rule 26)
    expr  ->  expr . '*' expr   (rule 27)
    expr  ->  expr . '/' expr   (rule 28)

    '+' 	shift, and go to state 44
    '-' 	shift, and go to state 45
    '*' 	shift, and go to state 46
    '/' 	shift, and go to state 47
    ')' 	shift, and go to state 49



state 42

    prop  ->  WHILE '(' expr . ')' prop   (rule 21)
    expr  ->  expr . '+' expr   (rule 25)
    expr  ->  expr . '-' expr   (rule 26)
    expr  ->  expr . '*' expr   (rule 27)
    expr  ->  expr . '/' expr   (rule 28)

    '+' 	shift, and go to state 44
    '-' 	shift, and go to state 45
    '*' 	shift, and go to state 46
    '/' 	shift, and go to state 47
    ')' 	shift, and go to state 50



state 43

    expr  ->  expr . '+' expr   (rule 25)
    expr  ->  expr . '-' expr   (rule 26)
    expr  ->  expr . '*' expr   (rule 27)
    expr  ->  expr . '/' expr   (rule 28)
    expr  ->  '(' expr . ')'   (rule 29)

    '+' 	shift, and go to state 44
    '-' 	shift, and go to state 45
    '*' 	shift, and go to state 46
    '/' 	shift, and go to state 47
    ')' 	shift, and go to state 51



state 44

    expr  ->  expr '+' . expr   (rule 25)

    ID  	shift, and go to state 37
    NUM 	shift, and go to state 38
    '(' 	shift, and go to state 39

    expr	go to state 52



state 45

    expr  ->  expr '-' . expr   (rule 26)

    ID  	shift, and go to state 37
    NUM 	shift, and go to state 38
    '(' 	shift, and go to state 39

    expr	go to state 53



state 46

    expr  ->  expr '*' . expr   (rule 27)

    ID  	shift, and go to state 37
    NUM 	shift, and go to state 38
    '(' 	shift, and go to state 39

    expr	go to state 54



state 47

    expr  ->  expr '/' . expr   (rule 28)

    ID  	shift, and go to state 37
    NUM 	shift, and go to state 38
    '(' 	shift, and go to state 39

    expr	go to state 55



state 48

    prop  ->  ID '=' expr ';' .   (rule 22)

    $default	reduce using rule 22 (prop)



state 49

    prop  ->  IF '(' expr ')' . prop   (rule 19)
    prop  ->  IF '(' expr ')' . prop ELSE prop   (rule 20)

    ID  	shift, and go to state 26
    IF  	shift, and go to state 27
    WHILE	shift, and go to state 28
    ';' 	shift, and go to state 29
    '{' 	shift, and go to state 18

    bloque	go to state 31
    prop	go to state 56



state 50

    prop  ->  WHILE '(' expr ')' . prop   (rule 21)

    ID  	shift, and go to state 26
    IF  	shift, and go to state 27
    WHILE	shift, and go to state 28
    ';' 	shift, and go to state 29
    '{' 	shift, and go to state 18

    bloque	go to state 31
    prop	go to state 57



state 51

    expr  ->  '(' expr ')' .   (rule 29)

    $default	reduce using rule 29 (expr)



state 52

    expr  ->  expr . '+' expr   (rule 25)
    expr  ->  expr '+' expr .   (rule 25)
    expr  ->  expr . '-' expr   (rule 26)
    expr  ->  expr . '*' expr   (rule 27)
    expr  ->  expr . '/' expr   (rule 28)

    '*' 	shift, and go to state 46
    '/' 	shift, and go to state 47

    $default	reduce using rule 25 (expr)



state 53

    expr  ->  expr . '+' expr   (rule 25)
    expr  ->  expr . '-' expr   (rule 26)
    expr  ->  expr '-' expr .   (rule 26)
    expr  ->  expr . '*' expr   (rule 27)
    expr  ->  expr . '/' expr   (rule 28)

    '*' 	shift, and go to state 46
    '/' 	shift, and go to state 47

    $default	reduce using rule 26 (expr)



state 54

    expr  ->  expr . '+' expr   (rule 25)
    expr  ->  expr . '-' expr   (rule 26)
    expr  ->  expr . '*' expr   (rule 27)
    expr  ->  expr '*' expr .   (rule 27)
    expr  ->  expr . '/' expr   (rule 28)


    $default	reduce using rule 27 (expr)



state 55

    expr  ->  expr . '+' expr   (rule 25)
    expr  ->  expr . '-' expr   (rule 26)
    expr  ->  expr . '*' expr   (rule 27)
    expr  ->  expr . '/' expr   (rule 28)
    expr  ->  expr '/' expr .   (rule 28)


    $default	reduce using rule 28 (expr)



state 56

    prop  ->  IF '(' expr ')' prop .   (rule 19)
    prop  ->  IF '(' expr ')' prop . ELSE prop   (rule 20)

    ELSE	shift, and go to state 58

    ELSE	[reduce using rule 19 (prop)]
    $default	reduce using rule 19 (prop)



state 57

    prop  ->  WHILE '(' expr ')' prop .   (rule 21)

    $default	reduce using rule 21 (prop)



state 58

    prop  ->  IF '(' expr ')' prop ELSE . prop   (rule 20)

    ID  	shift, and go to state 26
    IF  	shift, and go to state 27
    WHILE	shift, and go to state 28
    ';' 	shift, and go to state 29
    '{' 	shift, and go to state 18

    bloque	go to state 31
    prop	go to state 59



state 59

    prop  ->  IF '(' expr ')' prop ELSE prop .   (rule 20)

    $default	reduce using rule 20 (prop)



state 60

    $   	go to state 61



state 61

    $   	go to state 62



state 62

    $default	accept
