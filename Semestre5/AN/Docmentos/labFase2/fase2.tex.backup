\documentclass[a4paper,12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[spanish]{babel}
\usepackage{color}
\usepackage{parskip}
\usepackage{graphicx}
\usepackage{multirow}
\usepackage{listings}
\usepackage{vmargin}
\graphicspath{ {imagenes/} }
\definecolor{mygreen}{rgb}{0,0.6,0}
\definecolor{lbcolor}{rgb}{0.9,0.9,0.9}
\usepackage{epstopdf}


\setpapersize{A4}
\setmargins{2.5cm}       % margen izquierdo
{1.5cm}                        % margen superior
{16.5cm}                      % anchura del texto
{23.42cm}                    % altura del texto
{10pt}                           % altura de los encabezados
{1cm}                           % espacio entre el texto y los encabezados
{0pt}                             % altura del pie de página
{2cm}     

\lstset{
backgroundcolor=\color{lbcolor},
    tabsize=4,    
%   rulecolor=,
    language=[GNU]C++,
        basicstyle=\tiny,
        aboveskip={1.5\baselineskip},
        columns=fixed,
        showstringspaces=false,
        extendedchars=false,
        breaklines=true,
        prebreak = \raisebox{0ex}[0ex][0ex]{\ensuremath{\hookleftarrow}},
        frame=single,
        showtabs=false,
        showspaces=false,
        showstringspaces=false,
        identifierstyle=\ttfamily,
        keywordstyle=\color[rgb]{0,0,1},
        commentstyle=\color[rgb]{0.026,0.112,0.095},
        stringstyle=\color{red},
        numberstyle=\color[rgb]{0.205, 0.142, 0.73},
%        \lstdefinestyle{C++}{language=C++,style=numbers}’.
}

\begin{document}

\section{Métodos Iterativos para sistemas de ecuaciones lineales}
  \subsection{Jacoby}
  \begin{lstlisting}
Lista generarSiguienteAproxJacoby(Matriz &A, Lista &B, Lista &X){
	int n = X.size();
	Lista res(n);
	for(int i = 0; i < n; i++){
		res[i] = (B[i] - sumatoria(A,B,X,i)) / A[i][i];
	}
	return res;
}

void Jacoby(Matriz &A, Lista &B, Lista &X, int n, Presicion presicion, string fi){
	string file = fi + ".csv";
	ofstream archivo(file);
	int i = 0;
	archivo<<"\"X\",";
	for(int j = 0; j < X.size(); j++){
		archivo<<"\"X"<<to_string(j)<<"\"";
		if(j != X.size()-1) archivo<<",";
		else archivo<<endl;
	}
	Lista X_anterior;
	do{
		i++;
		X_anterior = X;
		X = generarSiguienteAproxJacoby(A,B,X);
		archivo<<"\"i"<<to_string(i)<<"\""<<endl;
		archivo<<"\"X\",";
		escribirLista(X,archivo);
	}while(_ErrorAbsoluto(X,X_anterior,presicion) and i < n);
	archivo<<"\"Resultado actual\",";
	escribirLista(X,archivo);
	archivo.close();
}
  \end{lstlisting}
  \subsection{Gauss-Seidel}
  \begin{lstlisting}
void generarSiguienteAproxGaus(Matriz &A, Lista &B, Lista &X){
	int n = X.size();
	for(int i = 0; i < n; i++){
		X[i] = (B[i] - sumatoria(A,B,X,i)) / A[i][i];
	}
}

void Gaus(Matriz &A, Lista &B, Lista &X, int n, Presicion presicion, string fi){
	string file = fi + ".csv";
	ofstream archivo(file);
	int i = 0;
	archivo<<"\"X\",";
	for(int j = 0; j < X.size(); j++){
		archivo<<"\"X"<<to_string(j)<<"\"";
		if(j != X.size()-1) archivo<<",";
		else archivo<<endl;
	}
	Lista X_anterior = X;
	do{
		i++;
		X_anterior = X;
		generarSiguienteAproxGaus(A,B,X);
		archivo<<"\"i"<<to_string(i)<<"\""<<endl;
		archivo<<"\"X\",";
		escribirLista(X,archivo);
	}while(_ErrorAbsoluto(X,X_anterior,presicion) and i < n);
	archivo<<"\"Resultado actual\",";
	escribirLista(X,archivo);
	archivo.close();
}
  \end{lstlisting}

\section{Métodos Directos para sistemas de ecuaciones lineales}
  \subsection{Gauss con pivoteo parcial}
  \begin{lstlisting}
Matriz Gauss(Matriz A, Lista &B){
	A = matrizAumentada(A,B);
	int pibot = 0;
	while(pibot != B.size() - 1){
		int mayor = buscarMayor(pibot,B.size()-1,pibot,A);
		if (mayor != pibot) swap(A[pibot],A[mayor]);
		for(int i = pibot+1; i < B.size(); i++){
			Num d = A[i][pibot]/A[pibot][pibot];
			for(int j = pibot; j < A[i].size(); j++){
				A[i][j] = A[i][j] - d*A[pibot][j];
			}
		}
		pibot++;
	}
	return A;
}
  \end{lstlisting}
  \subsection{Descomposición PLU}
  \begin{lstlisting}
tuple<Matriz,Matriz,Matriz> PLU(Matriz A){
	Matriz P = identidad(A.size());
	Matriz L = zeros(A.size());
	Matriz U = A;
	int pibot = 0;
	while(pibot != U.size() - 1){
		int mayor = buscarMayor(pibot,U.size()-1,pibot,U);
		if (mayor != pibot){
			swap(U[pibot],U[mayor]);		
			swap(P[pibot],P[mayor]);
			swap(L[pibot],L[mayor]);
		} 
		for(int i = pibot+1; i < U.size(); i++){
			Num d = U[i][pibot]/U[pibot][pibot];
			L[i][pibot] = d;
			for(int j = pibot; j < U[i].size(); j++){
				U[i][j] = U[i][j] - d*U[pibot][j];
			}
		}
		pibot++;
	}
	L = L + identidad(L.size());
	return make_tuple(P,L,U);
}
  \end{lstlisting}
   \subsection{Sustituciones}
   \begin{lstlisting}
   
Lista SustitucionRegresiva(Matriz A){ //Con Matriz Aumentada
	int j = 0;
	Lista res(A.size());
	for(int i = A.size() - 1; i >= 0; i--, j++){
		Num sum = 0;
		for(int k = 0; k < j; k++){
			sum += A[i][A[i].size() - 2 - k] * res[A[i].size() -2 -k];
		}
		res[A[i].size() -2-j] = (A[i][A[i].size()-1] - sum) / A[i][A[i].size()-2-j];

	}
	return res;
}

Lista SustitucionProgresiva(Matriz A){ //Con Matriz Aumentada
	int j = 0;
	Lista res(A.size());
	for(int i = 0; i < A.size(); i++, j++){
		Num sum = 0;
		for(int k = 0; k < j; k++){
			sum += A[i][k] * res[k];
		}
		res[j] = (A[i][A[i].size()-1] - sum) / A[i][j];
	}
	return res;
}
   \end{lstlisting}
\section{Métodos Iterativos para sistemas de ecuaciones no lineales}
  \subsection{Punto fijo generalizado}
  \begin{lstlisting}
   
  \end{lstlisting}


\end{document}
