\documentclass[a4paper,12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[spanish]{babel}
\usepackage{color}
\usepackage{parskip}
\usepackage{graphicx}
\usepackage{multirow}
\usepackage{listings}
\usepackage{vmargin}
\usepackage{datetime}
\newdate{date}{19}{10}{2017}
\graphicspath{ {imagenes/} }
\definecolor{mygreen}{rgb}{0,0.6,0}
\definecolor{lbcolor}{rgb}{0.9,0.9,0.9}
\usepackage{epstopdf}
\usepackage{float}


\setpapersize{A4}
\setmargins{2.5cm}       % margen izquierdo
{1.5cm}                        % margen superior
{16.5cm}                      % anchura del texto
{23.42cm}                    % altura del texto
{10pt}                           % altura de los encabezados
{1cm}                           % espacio entre el texto y los encabezados
{0pt}                             % altura del pie de página
{2cm}     

\lstset{
backgroundcolor=\color{lbcolor},
    tabsize=4,    
%   rulecolor=,
    language=[GNU]C++,
        basicstyle=\tiny,
        aboveskip={1.5\baselineskip},
        columns=fixed,
        showstringspaces=false,
        extendedchars=false,
        breaklines=true,
        prebreak = \raisebox{0ex}[0ex][0ex]{\ensuremath{\hookleftarrow}},
        frame=single,
        showtabs=false,
        showspaces=false,
        showstringspaces=false,
        identifierstyle=\ttfamily,
        keywordstyle=\color[rgb]{0,0,1},
        commentstyle=\color[rgb]{0.026,0.112,0.095},
        stringstyle=\color{red},
        numberstyle=\color[rgb]{0.205, 0.142, 0.73},
%        \lstdefinestyle{C++}{language=C++,style=numbers}’.
}


\begin{document}
\title{Tarea de Laboratorio 3}
\author{
Christofer Fabián Chávez Carazas \\
\small{Universidad Nacional de San Agustín de Arequipa} \\
\small{Escuela Profesional de Ciencia de la Computación} \\
\small{Compiladores}
}
\date{\displaydate{date}}

\maketitle

\begin{large}
 \textbf{Problema}
\end{large}


\textbf{Realizar un programa que convierta una expresión regular a un autómata}

El programa está estructurado de la siguiente manera:

\begin{itemize}
 \item \textbf{format.h:} Archivo con la función que da formato a la expresión regular.
 \item \textbf{postfix.h:} Archivo con la función que transforma una expresión regular en su forma postfija.
 \item \textbf{automata.h:} Archivo con la estructura utilizada para guardar un autómata.
 \item \textbf{compilador.h:} Archivo con el compilador que convierte una expresión regular a un autómata.
 \item \textbf{main.h:} Archivo que corre el compilador.
 \item \textbf{utils.h:} Archivo con funciones adicionales.
 \item \textbf{error.h:} Archivo para el manejo de errores.
\end{itemize}

\begin{enumerate}
 \item \textbf{format.h}
 
 En mi programa el único cambio que se hace en la expresión regular es la inserción del ``.'' como operador de concatenación. El operador OR no cambia.
 \begin{lstlisting}
string formatER(string er){
	int estado = 0;
	string res = "";
	for(char e : er){
		if(estado == 0){
			if(esOperador(e) != -1) throw(Error(FORMAT_ER_INICIO_CON_OPERADOR, er));
			if(e == '(' or e == ')') estado = 1;
			else estado = 2;
			res.push_back(e);
		}
		else if(estado == 1){
			int op = esOperador(e);
			if(op == 2) throw(Error(FORMAT_ER_OP_PUNTO, er));
			if(op == -1 and e != '(' and e != ')')  estado = 2;
			else if(op == 3) estado = 3;
			res.push_back(e);
		}
		else if(estado == 2){
			int op = esOperador(e);
			if(op == 2) throw(Error(FORMAT_ER_OP_PUNTO, er));
			if(e == '('){
				res.push_back('.');	
				estado = 1;	
			} 
			else if(e == ')') estado = 4;
			else if(op == -1) res.push_back('.');
			else if(op == 3) estado = 3;
			else if(op == 1) estado = 1;
			res.push_back(e);
			
		}
		else if(estado == 3){
			int op = esOperador(e);
			if(op == 2) throw(Error(FORMAT_ER_OP_PUNTO, er));			
			if(op == -1 and e != ')'){
				res.push_back('.');
				estado = 2;
			}
			else if(op == 1) estado = 1;
			res.push_back(e);
		}
		else if(estado == 4){
			int op = esOperador(e);
			if(op == 2) throw(Error(FORMAT_ER_OP_PUNTO, er));
			if(op == -1 and e != ')'){
				res.push_back('.');
				estado = 2;	
			}
			else if(op == 1) estado = 1;
			else if(op == 3) estado = 3;
			res.push_back(e);
		}
	}
	return res;
}
 \end{lstlisting}

 \item \textbf{postfix.h}
 
 El algoritmo convierte la expresión regular en su forma postfija.
 
 \begin{lstlisting}
 string infijaToPosfija(string er){
	list<char> pila;
	string res = "";
	int presedenciaE = -1;
	for(char e : er){
		if((presedenciaE = esOperador(e)) != -1){
			int presedencia2 = -1;
			char temp;
			while(!pila.empty()){
				temp = pila.front();
				if((presedencia2 = esOperador(temp)) == -1) break;
				else if(presedencia2 >= presedenciaE){
					pila.pop_front();
					res.push_back(temp);
				}
				else break;
			}
			pila.push_front(e);
		}
		
		else if(e == '(') pila.push_front(e);
		else if(e == ')'){
			bool flag = false;
			char temp;
			while(!pila.empty()){
				temp = pila.front();
				pila.pop_front();
				if(temp == '('){
					flag = true;
					break;
				}
				res.push_back(temp);
			}
			if(!flag) throw(Error(TO_POSFIX_PARENTESIS_ERROR,er));
		}
		else res.push_back(e);
		
	}
	for(char c : pila){
		res.push_back(c);
	}
	return res;
} 
 \end{lstlisting}

 \item \textbf{automata.h}

 Clase Autómata que guarda todos los datos como estados, entradas y transiciones. LA clase tiene un constructor, que recibe
 una entrada y el contador de estados, y genera el autómata para esa entrada. Contiene también una función
 que imprime el autómata en el formato dado en clases.
 
 \begin{lstlisting}
typedef int IdEstado;
typedef tuple<IdEstado,char,IdEstado> Transicion;

class Automata{
public:
	Automata(){};
	Automata(char c, IdEstado &estadoActual);

	void printAutomata();

	string expresionRegular;
	vector<IdEstado> estados;
	IdEstado inicial;
	vector<IdEstado> aceptacion;
	vector<char> entradas;
	vector<Transicion> transiciones;

};


Automata::Automata(char c, IdEstado &estadoActual){
	expresionRegular.push_back(c);
	estados.push_back(estadoActual);
	estadoActual++;
	estados.push_back(estadoActual);
	estadoActual++;
	inicial = estados.front();
	aceptacion.push_back(estados.back());
	entradas.push_back(c);
	transiciones.push_back(make_tuple(inicial,c,aceptacion.front()));
}

void Automata::printAutomata(){
	cout<<"Automata de "<<expresionRegular<<endl;
	cout<<"Estados"<<endl;
	cout<<estados.size()<<endl;
	for(IdEstado id : estados){
		cout<<id<<" ";
	}
	cout<<endl;
	cout<<"Inicial"<<endl;
	cout<<inicial<<endl;
	cout<<"Aceptacion"<<endl;
	cout<<aceptacion.size()<<endl;
	for(IdEstado id : aceptacion){
		cout<<id<<" ";
	}
	cout<<endl;
	cout<<"Entradas"<<endl;
	cout<<entradas.size()<<endl;
	for(char c : entradas){
		cout<<c<<' ';
	}
	cout<<endl;
	cout<<"Transiciones"<<endl;
	cout<<transiciones.size()<<endl;
	int id1 = -1;
	int id2 = -1;
	char c;
	for(Transicion tran : transiciones){
		tie(id1,c,id2) = tran;
		cout<<id1<<" "<<c<<" "<<id2<<endl;
	}
}
 \end{lstlisting}

 \item \textbf{compilador.h}
 
 Contiene la función \textit{run} que llama a la función para formatear y a la función para convertir a la forma postfija.
 Luego, 
 
 \begin{lstlisting}
#define VACIO 126

class CompiladorErToAuto{
public:
	CompiladorErToAuto(){};
	Automata run(string expresionRegular);
	Automata operacionOR(Automata automata1, Automata automata2);
        Automata operacionCONCAT(Automata automata1, Automata automata2);
        Automata operacionSUMA(Automata automata1);
        Automata operacionESTRELLA(Automata automata1);
    


	IdEstado estadoActual;
};


Automata CompiladorErToAuto::run(string expresionRegular){
	estadoActual = 0;
	list<Automata> pila;
	cout<<"Expresion Regular: "<<expresionRegular<<endl;
	string fER = formatER(expresionRegular);
	cout<<"Forma con formato: "<<fER<<endl;
	string postfixER = infijaToPosfija(fER);
	cout<<"Forma posfija: "<<postfixER<<endl;
	int op = -1;
	for(char c : postfixER){
		if((op = esOperadorOp(c)) != -1){
			Automata automata1;
			Automata automata2;
			switch(op){
			    case OR:
				automata2 = pila.front();
				pila.pop_front();
				automata1 = pila.front();
				pila.pop_front();
				pila.push_front(operacionOR(automata1,automata2));
				break;
			    case CONCAT:
				automata2 = pila.front();
				pila.pop_front();
				automata1 = pila.front();
				pila.pop_front();
				pila.push_front(operacionCONCAT(automata1,automata2));
				break;
			    case ESTRELLA:
				automata1 = pila.front();
				pila.pop_front();
				pila.push_front(operacionESTRELLA(automata1));
				break;
			    case SUMA:
				automata1 = pila.front();
				pila.pop_front();
				pila.push_front(operacionSUMA(automata1));
				break;
			}
	        }
		else pila.push_front(Automata(c,estadoActual));
	}
	Automata res = pila.front();
	cout<<endl;
	cout<<"Respuesta:"<<endl;
	res.printAutomata();
	return res;
}

Automata CompiladorErToAuto::operacionOR(Automata automata1, Automata automata2){
    Automata res;
    res.expresionRegular = automata1.expresionRegular + "|" + automata2.expresionRegular;
    res.estados = automata1.estados;
    res.estados.insert(res.estados.end(), automata2.estados.begin(), automata2.estados.end());
    res.estados.push_back(estadoActual);
    res.inicial = estadoActual;
    estadoActual++;
    res.estados.push_back(estadoActual);
    res.aceptacion.push_back(estadoActual);
    estadoActual++;
    res.entradas = automata1.entradas;
    res.entradas.insert(res.entradas.end(), automata2.entradas.begin(), automata2.entradas.end());
    res.transiciones = automata1.transiciones;
    res.transiciones.insert(res.transiciones.end(), automata2.transiciones.begin(), automata2.transiciones.end());
    for(IdEstado id : automata1.aceptacion){
        res.transiciones.push_back(make_tuple(id,VACIO,res.aceptacion.front()));
    }
    for(IdEstado id : automata2.aceptacion){
        res.transiciones.push_back(make_tuple(id,VACIO,res.aceptacion.front()));
    }
    res.transiciones.push_back(make_tuple(res.inicial,VACIO,automata1.inicial));
    res.transiciones.push_back(make_tuple(res.inicial,VACIO,automata2.inicial));
    return res;
}

Automata CompiladorErToAuto::operacionCONCAT(Automata automata1, Automata automata2){
    Automata res;
    res.expresionRegular = automata1.expresionRegular + "." + automata2.expresionRegular;
    res.estados = automata1.estados;
    res.estados.insert(res.estados.end(), automata2.estados.begin(), automata2.estados.end());
    res.inicial = automata1.inicial;
    res.aceptacion = automata2.aceptacion;
    res.entradas = automata1.entradas;
    res.entradas.insert(res.entradas.end(), automata2.entradas.begin(), automata2.entradas.end());
    res.transiciones = automata1.transiciones;
    res.transiciones.insert(res.transiciones.end(), automata2.transiciones.begin(), automata2.transiciones.end());
    for(IdEstado id : automata1.aceptacion){
        res.transiciones.push_back(make_tuple(id,VACIO,automata2.inicial));
    }
    return res;
}

Automata CompiladorErToAuto::operacionSUMA(Automata automata1){
    Automata res;
    res.expresionRegular = "(" + automata1.expresionRegular + ")+";
    res.estados = automata1.estados;
    res.estados.push_back(estadoActual);
    res.inicial = estadoActual;
    estadoActual++;
    res.estados.push_back(estadoActual);
    res.aceptacion.push_back(estadoActual);
    estadoActual++;
    res.entradas = automata1.entradas;
    res.transiciones = automata1.transiciones;
    for(IdEstado id : automata1.aceptacion){
        res.transiciones.push_back(make_tuple(id,VACIO,res.aceptacion.front()));
        res.transiciones.push_back(make_tuple(id,VACIO,automata1.inicial));
    }
    res.transiciones.push_back(make_tuple(res.inicial,VACIO,automata1.inicial));
    return res;
}

Automata CompiladorErToAuto::operacionESTRELLA(Automata automata1){
    Automata res = operacionSUMA(automata1);
    res.expresionRegular[res.expresionRegular.size() - 1] = '*';
    res.transiciones.push_back(make_tuple(res.inicial,VACIO,res.aceptacion.front()));
    return res;
}
 \end{lstlisting}


\end{enumerate}



\end{document}

