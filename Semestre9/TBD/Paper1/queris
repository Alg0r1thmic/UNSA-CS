select MovieId from ratings where UserId = 1;

select MovieId from ratings where UserID <> 1;

select B.MovieId, B.UserId, A.Puntaje, B.Puntaje from ratings as A join ratings as B on A.UserId = B.UserId where A.MovieId = 10;


--desviaciones de una peli contra todas
select B.MovieId, AVG(A.Puntaje - B.Puntaje), COUNT(B.MovieId) as p from ratings as A join ratings as B on A.UserId = B.UserId where A.MovieId = 10 group by B.MovieId;

--con Filtro (peliculas que tiene el usuario)
select B.MovieId, AVG(A.Puntaje - B.Puntaje) as desviacion, COUNT(B.MovieId) as cardinalidad from ratings as A join ratings as B on A.UserId = B.UserId where A.MovieId = 10 and B.MovieId IN (select MovieId from ratings where UserId = 1) group by B.MovieId;

--Inner con el puntaje
select Desv.MovieId, Desv.desviacion, Desv.cardinalidad, Puntaje from (select B.MovieId, AVG(A.Puntaje - B.Puntaje) as desviacion, COUNT(B.MovieId) as cardinalidad from ratings as A join ratings as B on A.UserId = B.UserId where A.MovieId = 10 and B.MovieId IN (select MovieId from ratings where UserId = 1) group by B.MovieId) as Desv join ratings on Desv.MovieId = ratings.MovieId where ratings.UserId = 1;

--Numerador
select SUM((desviacion - Puntaje) * cardinalidad) from (select B.MovieId, AVG(A.Puntaje - B.Puntaje) as desviacion, COUNT(B.MovieId) as cardinalidad from ratings as A join ratings as B on A.UserId = B.UserId where A.MovieId = 10 and B.MovieId IN (select MovieId from ratings where UserId = 1) group by B.MovieId) as Desv join ratings on Desv.MovieId = ratings.MovieId where ratings.UserId = 1;


select A.MovieId, B.MovieId, A.Puntaje, B.Puntaje  from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = 1);

select A.MovieId, B.MovieId, AVG(A.Puntaje - B.Puntaje), COUNT(B.MovieId) from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = 1) and A.MovieId NOT IN (select MovieId from ratings where UserId = 1) group by A.MovieId, B.MovieId;

select MovieA,MovieB,desviacion,cardinalidad,Puntaje from (select A.MovieId as MovieA, B.MovieId as MovieB, AVG(A.Puntaje - B.Puntaje) as desviacion, COUNT(B.MovieId) as cardinalidad from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = 1) and A.MovieId NOT IN (select MovieId from ratings where UserId = 1) group by A.MovieId, B.MovieId) as Desv join ratings on Desv.MovieB = ratings.MovieId where ratings.UserId = 1;


select MovieA, desviacion,puntaje,cardinalidad from (select A.MovieId as MovieA, B.MovieId as MovieB, AVG(A.Puntaje - B.Puntaje) as desviacion, COUNT(B.MovieId) as cardinalidad from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = 1) and A.MovieId NOT IN (select MovieId from ratings where UserId = 1) group by A.MovieId, B.MovieId) as Desv join ratings on Desv.MovieB = ratings.MovieId where ratings.UserId = 1;


---FINAL
select MovieA, SUM((desviacion+puntaje)*cardinalidad)/SUM(cardinalidad) as Slope from (select A.MovieId as MovieA, B.MovieId as MovieB, AVG(A.Puntaje - B.Puntaje) as desviacion, COUNT(B.MovieId) as cardinalidad from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = 1) and A.MovieId NOT IN (select MovieId from ratings where UserId = 1) group by A.MovieId, B.MovieId) as Desv join ratings on Desv.MovieB = ratings.MovieId where ratings.UserId = 1 group by MovieA;


--InnerLens
select movies.MovieLensId, Slope from (select MovieA, SUM((desviacion+puntaje)*cardinalidad)/SUM(cardinalidad) as Slope from (select A.MovieId as MovieA, B.MovieId as MovieB, AVG(A.Puntaje - B.Puntaje) as desviacion, COUNT(B.MovieId) as cardinalidad from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = 1) and A.MovieId NOT IN (select MovieId from ratings where UserId = 1) group by A.MovieId, B.MovieId) as Desv join ratings on Desv.MovieB = ratings.MovieId where ratings.UserId = 1 group by MovieA) as S join movies on movies.MovieId = S.MovieA;


--FINAL with k and names
select MovieName, Slope from (select MovieA, SUM((desviacion+puntaje)*cardinalidad)/SUM(cardinalidad) as Slope from (select A.MovieId as MovieA, B.MovieId as MovieB, AVG(A.Puntaje - B.Puntaje) as desviacion, COUNT(B.MovieId) as cardinalidad from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = 1) and A.MovieId NOT IN (select MovieId from ratings where UserId = 1) group by A.MovieId, B.MovieId) as Desv join ratings on Desv.MovieB = ratings.MovieId where ratings.UserId = 1 group by MovieA order by Slope DESC limit 0,10) as S join movies on MovieA = movies.MovieId;


--FINAL with variables
select MovieName, Slope from (select MovieA, SUM((desviacion+puntaje)*cardinalidad)/SUM(cardinalidad) as Slope from (select A.MovieId as MovieA, B.MovieId as MovieB, AVG(A.Puntaje - B.Puntaje) as desviacion, COUNT(B.MovieId) as cardinalidad from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = UID) and A.MovieId NOT IN (select MovieId from ratings where UserId = UID) group by A.MovieId, B.MovieId) as Desv join ratings on Desv.MovieB = ratings.MovieId where ratings.UserId = UID group by MovieA order by Slope DESC limit 0,K) as S join movies on MovieA = movies.MovieId;


DELIMITER //
CREATE PROCEDURE recommend(IN UID INT,IN K INT)
BEGIN
select MovieName, Slope from (select MovieA, SUM((desviacion+puntaje)*cardinalidad)/SUM(cardinalidad) as Slope from (select A.MovieId as MovieA, B.MovieId as MovieB, AVG(A.Puntaje - B.Puntaje) as desviacion, COUNT(B.MovieId) as cardinalidad from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = UID) and A.MovieId NOT IN (select MovieId from ratings where UserId = UID) group by A.MovieId, B.MovieId) as Desv join ratings on Desv.MovieB = ratings.MovieId where ratings.UserId = UID group by MovieA order by Slope DESC limit 0,K) as S join movies on MovieA = movies.MovieId;
END //
DELIMITER;


DELIMITER //
CREATE PROCEDURE recommend(IN UID INT,IN K INT)
BEGIN
select TMDB_ID, MovieName, MovieA, Slope from (select MovieA, SUM((desviacion+puntaje)*cardinalidad)/SUM(cardinalidad) as Slope from (select A.MovieId as MovieA, B.MovieId as MovieB, AVG(A.Puntaje - B.Puntaje) as desviacion, COUNT(B.MovieId) as cardinalidad from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = UID) and A.MovieId NOT IN (select MovieId from ratings where UserId = UID) group by A.MovieId, B.MovieId) as Desv join ratings on Desv.MovieB = ratings.MovieId where ratings.UserId = UID group by MovieA order by Slope DESC limit 0,K) as S join movies on MovieA = movies.MovieId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE recommendSlopeTest(IN UID INT, IN MID INT)
BEGIN
select TMDB_ID, MovieName, MovieA, Slope from (select MovieA, SUM((desviacion+puntaje)*cardinalidad)/SUM(cardinalidad) as Slope from (select A.MovieId as MovieA, B.MovieId as MovieB, AVG(A.Puntaje - B.Puntaje) as desviacion, COUNT(B.MovieId) as cardinalidad from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = UID) and A.MovieId = MID group by A.MovieId, B.MovieId) as Desv join ratings on Desv.MovieB = ratings.MovieId where ratings.UserId = UID group by MovieA order by Slope DESC limit 0,10) as S join movies on MovieA = movies.MovieId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE recommend(IN UID INT,IN K INT)
BEGIN
select TMDB_ID, MovieName, MovieA, Slope from (select MovieA, SUM((desviacion+puntaje)*cardinalidad)/SUM(cardinalidad) as Slope from (select A.MovieId as MovieA, B.MovieId as MovieB, AVG(A.Puntaje - B.Puntaje) as desviacion, COUNT(B.MovieId) as cardinalidad from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = UID and puntaje <> 0) and A.MovieId NOT IN (select MovieId from ratings where UserId = UID and puntaje <> 0) group by A.MovieId, B.MovieId) as Desv join ratings on Desv.MovieB = ratings.MovieId where ratings.UserId = UID group by MovieA order by Slope DESC limit 0,K) as S join movies on MovieA = movies.MovieId;
END //
DELIMITER ;



----------------------------------------------------------------------



select UserId, AVG(Puntaje) As promedios from ratings group by UserId;




select MovieA, MovieB, PA, PB, promedios from (select A.UserId,  A.MovieId as MovieA, B.MovieId as MovieB, A.Puntaje as PA, B.Puntaje as PB  from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = 1)) as PT join (select UserId, AVG(Puntaje) As promedios from ratings group by UserId) as PRT on PT.UserId = PRT.UserId;


select MovieA, MovieB, SUM((PA-promedios)*(PB-promedios)) / (SQRT(SUM(POW(PA-promedios,2))) * SQRT(SUM(POW(PB-promedios, 2)))) from (select A.UserId,  A.MovieId as MovieA, B.MovieId as MovieB, A.Puntaje as PA, B.Puntaje as PB  from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = 1)) as PT join (select UserId, AVG(Puntaje) As promedios from ratings group by UserId) as PRT on PT.UserId = PRT.UserId group by MovieA, MovieB;


select MovieA, MovieB, SUM((PA-promedios)*(PB-promedios)) / (SQRT(SUM(POW(PA-promedios,2))) * SQRT(SUM(POW(PB-promedios, 2)))) as similitud from (select A.UserId,  A.MovieId as MovieA, B.MovieId as MovieB, A.Puntaje as PA, B.Puntaje as PB  from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = 1)) as PT join (select UserId, AVG(Puntaje) As promedios from ratings group by UserId) as PRT on PT.UserId = PRT.UserId group by MovieA, MovieB;


select MovieId, (2 *(puntaje -minC) - (maxC-minC)) / (maxC-minC) as Norm  from ratings cross join (select MIN(puntaje) as minC, MAX(puntaje) as maxC from ratings where userid = 1) as MM where userId = 1;


select MovieA, MovieB, similitud, norm from (select MovieA, MovieB, SUM((PA-promedios)*(PB-promedios)) / (SQRT(SUM(POW(PA-promedios,2))) * SQRT(SUM(POW(PB-promedios, 2)))) as similitud from (select A.UserId,  A.MovieId as MovieA, B.MovieId as MovieB, A.Puntaje as PA, B.Puntaje as PB  from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = 1)) as PT join (select UserId, AVG(Puntaje) As promedios from ratings group by UserId) as PRT on PT.UserId = PRT.UserId group by MovieA, MovieB) as ST join (select MovieId, (2 *(puntaje -minC) - (maxC-minC)) / (maxC-minC) as Norm  from ratings cross join (select MIN(puntaje) as minC, MAX(puntaje) as maxC from ratings where userid = 1) as MM where userId = 1) AS NT on ST.MovieB = NT.MovieId;

select MovieA, SUM(similitud * norm)/SUM(ABS(similitud)) as prediccion from (select MovieA, MovieB, SUM((PA-promedios)*(PB-promedios)) / (SQRT(SUM(POW(PA-promedios,2))) * SQRT(SUM(POW(PB-promedios, 2)))) as similitud from (select A.UserId,  A.MovieId as MovieA, B.MovieId as MovieB, A.Puntaje as PA, B.Puntaje as PB  from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = 1)) as PT join (select UserId, AVG(Puntaje) As promedios from ratings group by UserId) as PRT on PT.UserId = PRT.UserId group by MovieA, MovieB) as ST join (select MovieId, (2 *(puntaje -minC) - (maxC-minC)) / (maxC-minC) as Norm  from ratings cross join (select MIN(puntaje) as minC, MAX(puntaje) as maxC from ratings where userid = 1) as MM where userId = 1) AS NT on ST.MovieB = NT.MovieId group by MovieA;



--FINAL--
select MovieA, 0.5 * (prediccion + 1) * (maxC - minC) + minC as prediccionReal from (select MovieA, SUM(similitud * norm)/SUM(ABS(similitud)) as prediccion from (select MovieA, MovieB, SUM((PA-promedios)*(PB-promedios)) / (SQRT(SUM(POW(PA-promedios,2))) * SQRT(SUM(POW(PB-promedios, 2)))) as similitud from (select A.UserId,  A.MovieId as MovieA, B.MovieId as MovieB, A.Puntaje as PA, B.Puntaje as PB  from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = 5)) as PT join (select UserId, AVG(Puntaje) As promedios from ratings group by UserId) as PRT on PT.UserId = PRT.UserId group by MovieA, MovieB) as ST join (select MovieId, (2 *(puntaje -minC) - (maxC-minC)) / (maxC-minC) as Norm  from ratings cross join (select MIN(puntaje) as minC, MAX(puntaje) as maxC from ratings where userid = 5) as MM where userId = 5) AS NT on ST.MovieB = NT.MovieId group by MovieA) as PT cross join (select MIN(puntaje) as minC, MAX(puntaje) as maxC from ratings where userid = 5) as NT2 order by prediccionReal DESC limit 0,10;




DELIMITER //
CREATE PROCEDURE recommendCos(IN UID INT,IN K INT)
BEGIN
select TMDB_ID, MovieName, MovieA, prediccionReal from (select MovieA, 0.5 * (prediccion + 1) * (maxC - minC) + minC as prediccionReal from (select MovieA, SUM(similitud * norm)/SUM(ABS(similitud)) as prediccion from (select MovieA, MovieB, SUM((PA-promedios)*(PB-promedios)) / (SQRT(SUM(POW(PA-promedios,2))) * SQRT(SUM(POW(PB-promedios, 2)))) as similitud from (select A.UserId,  A.MovieId as MovieA, B.MovieId as MovieB, A.Puntaje as PA, B.Puntaje as PB  from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = UID)) as PT join (select UserId, AVG(Puntaje) As promedios from ratings group by UserId) as PRT on PT.UserId = PRT.UserId group by MovieA, MovieB) as ST join (select MovieId, (2 *(puntaje -minC) - (maxC-minC)) / (maxC-minC) as Norm  from ratings cross join (select MIN(puntaje) as minC, MAX(puntaje) as maxC from ratings where userid = UID) as MM where userId = UID) AS NT on ST.MovieB = NT.MovieId group by MovieA) as PT cross join (select MIN(puntaje) as minC, MAX(puntaje) as maxC from ratings where userid = UID) as NT2 order by prediccionReal DESC limit 0,K) as REST join movies on REST.MovieA = movies.movieId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE recommendCosTest(IN UID INT,IN MID INT)
BEGIN
select TMDB_ID, MovieName, MovieA, prediccionReal from (select MovieA, 0.5 * (prediccion + 1) * (maxC - minC) + minC as prediccionReal from (select MovieA, SUM(similitud * norm)/SUM(ABS(similitud)) as prediccion from (select MovieA, MovieB, SUM((PA-promedios)*(PB-promedios)) / (SQRT(SUM(POW(PA-promedios,2))) * SQRT(SUM(POW(PB-promedios, 2)))) as similitud from (select A.UserId,  A.MovieId as MovieA, B.MovieId as MovieB, A.Puntaje as PA, B.Puntaje as PB  from ratings as A join ratings as B on A.UserId = B.UserId where A.MovieId = MID and B.MovieId IN (select MovieId from ratings where UserId = UID)) as PT join (select UserId, AVG(Puntaje) As promedios from ratings group by UserId) as PRT on PT.UserId = PRT.UserId group by MovieA, MovieB) as ST join (select MovieId, (2 *(puntaje -minC) - (maxC-minC)) / (maxC-minC) as Norm  from ratings cross join (select MIN(puntaje) as minC, MAX(puntaje) as maxC from ratings where userid = UID) as MM where userId = 1) AS NT on ST.MovieB = NT.MovieId group by MovieA) as PT cross join (select MIN(puntaje) as minC, MAX(puntaje) as maxC from ratings where userid = UID) as NT2) as REST join movies on REST.MovieA = movies.movieId;
END //
DELIMITER ;




DELIMITER //
CREATE PROCEDURE recommendCos(IN UID INT,IN K INT)
BEGIN
select TMDB_ID, MovieName, MovieA, prediccionReal from (select MovieA, 0.5 * (prediccion + 1) * (maxC - minC) + minC as prediccionReal from (select MovieA, SUM(similitud * norm)/SUM(ABS(similitud)) as prediccion from (select MovieA, MovieB, SUM((PA-promedios)*(PB-promedios)) / (SQRT(SUM(POW(PA-promedios,2))) * SQRT(SUM(POW(PB-promedios, 2)))) as similitud from (select A.UserId,  A.MovieId as MovieA, B.MovieId as MovieB, A.Puntaje as PA, B.Puntaje as PB  from ratings as A join ratings as B on A.UserId = B.UserId where B.MovieId IN (select MovieId from ratings where UserId = UID and puntaje <> 0)) as PT join (select UserId, AVG(Puntaje) As promedios from ratings group by UserId) as PRT on PT.UserId = PRT.UserId group by MovieA, MovieB) as ST join (select MovieId, (2 *(puntaje -minC) - (maxC-minC)) / (maxC-minC) as Norm  from ratings cross join (select MIN(puntaje) as minC, MAX(puntaje) as maxC from ratings where userid = UID and puntaje <> 0) as MM where userId = UID and puntaje <> 0) AS NT on ST.MovieB = NT.MovieId group by MovieA) as PT cross join (select MIN(puntaje) as minC, MAX(puntaje) as maxC from ratings where userid = UID and puntaje <> 0) as NT2 order by prediccionReal DESC limit 0,K) as REST join movies on REST.MovieA = movies.movieId;
END //
DELIMITER ;



SELECT CONCAT('ALTER TABLE ', TABLE_SCHEMA, '.', TABLE_NAME,' ENGINE=MyISAM;') 
FROM Information_schema.TABLES WHERE TABLE_SCHEMA = 'ml' AND ENGINE = 'InnoDB' AND TABLE_TYPE = 'BASE TABLE'


mysqld --innodb_buffer_pool_size=2147483648 --innodb_buffer_pool_instances=4 --innodb_buffer_pool_chunk_size=1073741824;




------------------------------------------------


select COUNT(distinct MovieId) from ratings where MovieId NOT IN (select MovieId from ratings where userId = 1);

select MovieId, COUNT(UserId) from ratings group by MovieId;

select UserId, COUNT(MovieId) from ratings group by UserId;


select MovieId, COUNT(MovieId) from ratings group by MovieId;

select MovieID, SUM(Puntaje) / COUNT(MovieId) from ratings group by MovieID;


-------------------------------------------------


select A.MovieId, B.MovieId, AVG(A.Puntaje - B.Puntaje), COUNT(B.MovieId) as p from ratings as A join ratings as B on A.UserId = B.UserId where A.MovieId = 10 group by B.MovieId;




